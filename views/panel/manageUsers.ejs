<div class="container">
  <div class="mt-4">
    <h2>Manage Users</h2>
  </div>
  <div class="mt-4">
    <div class="row">
      <div class="col-xs-12 col-md-6">
        <div class="mb-3">
          <label for="username" class="form-label">Username</label>
          <input type="text" class="form-control" id="username" name="username" required>
        </div>
      </div>
      <div class="col-xs-12 col-md-6">
        <div class="mb-3">
          <label for="emailAddress" class="form-label">Email address</label>
          <input type="text" class="form-control" id="emailAddress" name="emailAddress">
        </div>
      </div>
      <div class="col-xs-12 col-md-6">
        <div class="mb-3">
          <label for="password" class="form-label">Password</label>
          <input type="password" class="form-control" id="password" name="password" required>
        </div>
      </div>
      <div class="col-xs-12 col-md-6">
        <div class="mb-3">
          <label for="confirmPassword" class="form-label">Confirm Password</label>
          <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
        </div>
      </div>
      <div class="col-xs-12 col-md-6">
        <div class="mb-3">
          <label for="displayName" class="form-label">Display Name</label>
          <input type="text" class="form-control" id="displayName" name="displayName">
        </div>
      </div>
      <div class="col-xs-12 col-md-6">
        <div class="mb-3">
          <label for="title" class="form-label">Title</label>
          <input type="text" class="form-control" id="title" name="title">
        </div>
      </div>
      <div class="col-xs-12">
        <button id="createUserButton" class="btn btn-primary">Create User</button>
      </div>
    </div>
  </div>
  <div id="message" class="mt-3"></div>

  <div class="mt-5">
    <h3>Users List</h3>
    <div class="table-responsive">
      <table class="table table-striped table-sm" id="usersTable">
        <!-- The table content will be dynamically inserted here -->
      </table>
    </div>
  </div>
</div>

<script dev signal key="getAllUsersScript">
  setTimeout(async _ => {
    try {
      const response = await fetch("/api/authorized/getAllUsers", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-bearer": sessionStorage.getItem("token")
        }
      });

      const result = await response.json();
      console.log("API Response (users):", result);

      document.querySelectorAll('.table-responsive').forEach(container => {
        if (result.usersData && result.usersData.length > 0) {
          // Create thead
          const thead = document.createElement('thead');
          const headerRow = document.createElement('tr');
          headerRow.classList.add("text-center");
          Object.keys(result.usersData[0]).forEach(key => {
            const headerCell = document.createElement('th');
            headerCell.textContent = key.charAt(0).toUpperCase() + key.slice(1);
            headerRow.appendChild(headerCell);
          });
          // Add a column for actions
          const actionHeaderCell = document.createElement('th');
          actionHeaderCell.textContent = 'Actions';
          headerRow.appendChild(actionHeaderCell);
          thead.appendChild(headerRow);
          container.querySelector('table').appendChild(thead);

          // Create tbody
          const tbody = document.createElement('tbody');
          result.usersData.forEach(userData => {
            const userRowElement = document.createElement('tr');
            Object.keys(userData).forEach(userObjectKey => {
              const cell = document.createElement('td');
              cell.textContent = userData[userObjectKey];
              userRowElement.appendChild(cell);
            });

            // Actions dropdown using Bootstrap 5
            const actionsCell = document.createElement('td');
            const dropdownDiv = document.createElement('div');
            dropdownDiv.className = 'dropdown';

            const dropdownButton = document.createElement('button');
            dropdownButton.className = 'btn btn-secondary dropdown-toggle';
            dropdownButton.setAttribute('type', 'button');
            dropdownButton.setAttribute('data-bs-toggle', 'dropdown');
            dropdownButton.setAttribute('aria-expanded', 'false');
            dropdownButton.textContent = 'Action';

            const dropdownMenu = document.createElement('ul');
            dropdownMenu.className = 'dropdown-menu';

            // Populate dropdown menu
            const actions = ['Delete User'];
            actions.forEach(action => {
              const actionItem = document.createElement('li');
              const actionLink = document.createElement('a');
              actionLink.className = 'dropdown-item';
              actionLink.href = '#';
              actionLink.textContent = action;
              actionLink.addEventListener('click', function(event) {
                event.preventDefault();
                alert('Action: ' + action + ' for ' + userData.username); // Implement actual action functionality
              });
              actionItem.appendChild(actionLink);
              dropdownMenu.appendChild(actionItem);
            });

            dropdownDiv.appendChild(dropdownButton);
            dropdownDiv.appendChild(dropdownMenu);
            actionsCell.appendChild(dropdownDiv);

            userRowElement.appendChild(actionsCell);
            tbody.appendChild(userRowElement);
          });
          container.querySelector('table').appendChild(tbody);
        }
      });

      // Initialize dropdowns
      var dropdownElementList = [].slice.call(document.querySelectorAll('.dropdown-toggle'));
      var dropdownList = dropdownElementList.map(function (dropdownToggleEl) {
        return new bootstrap.Dropdown(dropdownToggleEl);
      });

    } catch (err) {
      console.error(err);
    }
  });

  // Form Validation
  document.getElementById('createUserButton').addEventListener('click', function(event) {
    event.preventDefault(); // Prevent form submission to manually validate

    const username = document.getElementById('username').value.trim();
    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    const emailAddress = document.getElementById('emailAddress').value.trim();
    const displayName = document.getElementById('displayName').value.trim();

    if (!username || !password || !confirmPassword) {
      document.getElementById('message').textContent = 'Username, password, and confirm password are required.';
      return;
    }

    if (password !== confirmPassword) {
      document.getElementById('message').textContent = 'Passwords do not match.';
      return;
    }

    if (!emailAddress) {
      document.getElementById('message').textContent = 'Email address is required.';
      return;
    }

    if (!displayName) {
      document.getElementById('message').textContent = 'Display name is required.';
      return;
    }

    document.getElementById('message').textContent = ''; // Clear previous messages
    // If everything is fine, you can proceed to send the data to the backend
    alert('User data is valid! Proceeding to create user...');
    // Add backend user creation logic here
  });
</script>
